generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model allergy {
  id               Int                @id
  class            String?            @db.VarChar
  type             String?            @db.VarChar
  group            String?            @db.VarChar
  allergy_name     String?            @db.VarChar
  allergen         String?            @db.VarChar
  product_allergen product_allergen[]
  users_allergy    users_allergy[]
}

model article {
  id          Int       @id
  title       String?   @db.VarChar
  description String?   @db.VarChar
  author      String?   @db.VarChar
  content     String?   @db.VarChar
  img_url     String?   @db.VarChar
  createdAt   DateTime? @db.Timestamp(6)
}

model grade {
  id         Int       @id
  grade_name String?   @db.VarChar
  grade_desc String?   @db.VarChar
  product    product[]
}

model history_product {
  id         String    @id @db.VarChar
  product_id String?   @db.VarChar
  users_id   String?   @db.VarChar
  created_at DateTime? @db.Timestamp(6)
  product    product?  @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?    @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model label {
  id            Int             @id
  label_name    String?         @db.VarChar
  label_desc    String?         @db.VarChar
  product_label product_label[]
}

model product {
  id               String             @id @db.VarChar
  name             String?            @db.VarChar
  grades_id        Int?
  overall          String?            @db.VarChar
  calories         String?            @db.VarChar
  calories_ing     String?            @db.VarChar
  protein          String?            @db.VarChar
  protein_ing      String?            @db.VarChar
  fat              String?            @db.VarChar
  fat_ing          String?            @db.VarChar
  fiber            String?            @db.VarChar
  fiber_ing        String?            @db.VarChar
  carbo            String?            @db.VarChar
  carbo_ing        String?            @db.VarChar
  sugar            String?            @db.VarChar
  sugar_ing        String?            @db.VarChar
  history_product  history_product[]
  grade            grade?             @relation(fields: [grades_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product_allergen product_allergen[]
  product_label    product_label[]
}

model product_allergen {
  id         String   @id @db.VarChar
  product_id String?  @db.VarChar
  allergy_id Int?
  allergen   String?  @db.VarChar
  allergy    allergy? @relation(fields: [allergy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model product_label {
  id         String   @id @db.VarChar
  product_id String?  @db.VarChar
  label_id   Int?
  label      label?   @relation(fields: [label_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  product    product? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id              String            @id @db.VarChar
  name            String?           @db.VarChar
  email           String?           @db.VarChar
  password        String?           @db.VarChar
  token           String?           @db.VarChar
  refresh_token   String?           @db.VarChar
  created_at      DateTime?         @db.Timestamp(6)
  history_product history_product[]
  users_allergy   users_allergy[]
}

model users_allergy {
  id         String   @id @db.VarChar
  users_id   String?  @db.VarChar
  allergy_id Int?
  allergy    allergy? @relation(fields: [allergy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users      users?   @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
